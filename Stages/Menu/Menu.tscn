[gd_scene load_steps=15 format=2]

[ext_resource path="res://Scenes/Background/Background.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/Bird/Bird.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Ground/Ground.tscn" type="PackedScene" id=3]
[ext_resource path="res://flappy bird - sprites/label_flappy_bird.png" type="Texture" id=4]
[ext_resource path="res://flappy bird - sprites/button_rate_normal.png" type="Texture" id=5]
[ext_resource path="res://flappy bird - sprites/button_rate_pressed.png" type="Texture" id=6]
[ext_resource path="res://flappy bird - sprites/button_play_normal.png" type="Texture" id=7]
[ext_resource path="res://flappy bird - sprites/button_play_pressed.png" type="Texture" id=8]
[ext_resource path="res://flappy bird - sprites/button_score_normal.png" type="Texture" id=9]
[ext_resource path="res://flappy bird - sprites/button_score_pressed.png" type="Texture" id=10]

[sub_resource type="GDScript" id=1]
script/source = "extends Camera2D

#current allows camera to be only active camera for user to see
#camera needs to be offset to see center of bird and obstacles

#onready var bird declares node when scene tree is ready
#onready must be used as without it node is declared when scene tree is not ready (game not ready)
#get_node(\"../Bird\") gets bird node from the same parent node of camera (GameStage)

#node heirachy - scene tree -> root node -> parent/main node(Node2D) -> child node(camera2D)

#bird node is retrieved from scene tree -> root node -> parent node(get_child(0) gets child node of root node) -> child node
#onready var bird = get_tree().get_root().get_node(\"GameStage\").get_node(\"Bird\")
onready var bird = get_tree().get_root().get_node(\"Menu/Bird\")

func _ready():
	pass

func _physics_process(delta):
	#set camera position to x position of bird
	position = Vector2(bird.position.x, position.y)

#adjust ground spawner with camera offset
func get_total_position():
	return get_global_position() + offset"

[sub_resource type="GDScript" id=2]
script/source = "extends RigidBody2D

#set current state which will run _init() in any of the State and passes self node
onready var state = FlyingState.new(self)

#set speed of bird moving rightwards
var speed

#signals change of state
signal state_changed

signal position_changed

#used to identify the different states
const STATE_FLYING = 0
const STATE_FLAPPING = 1
const STATE_HIT = 2
const STATE_GROUNDED = 3

#initialise when node is added to scene
#_ready() is callback or return function
func _ready():
	#add bird to group \"Bird\"
	add_to_group(\"Bird\")
	#connect signal when bird hits collision (contact monitor is true so signal is emitted when body is collided)
	connect(\"body_entered\", self, \"_on_Body_entered\")
	pass

func _on_speed_changed():
	pass

#function called every frame
func _physics_process(delta):
	#states update(delta) function will be called in place with _physics_process()
	state.update(delta)

#function every time any input is used (mouse movement)
func _input(event):
	#states input(event) function will be called in place with input()
	state.input(event)
	if state.has_method(\"input\"):
		state.input(event)

func _on_Body_entered(body):
	#if any state has method on_Bird_Body_entered the function will be called
	if state.has_method(\"on_Bird_Body_entered\"):
		#delegate function to current state
		state.on_Bird_Body_entered(body)

#used as identifer for one of the states
func set_state(new_state):
	#state has finished
	state.exit()
	
	#if new state is either one of the given states assign state to given state
	if new_state == STATE_FLYING:
		state = FlyingState.new(self)
	elif new_state == STATE_FLAPPING:
		state = FlappingState.new(self)
	elif new_state == STATE_HIT:
		state = HitState.new(self)
	elif new_state == STATE_GROUNDED:
		state = GroundState.new(self)
	
	#other nodes connect to bird node need to know states
	emit_signal(\"state_changed\", self)

#get current state
func get_state():
	#if the state is an instance of a state (return which state is in use)
	if state is FlyingState:
		return STATE_FLYING
	elif state is FlappingState:
		return STATE_FLAPPING
	elif state is HitState:
		return STATE_HIT
	if state is GroundState:
		return STATE_GROUNDED
	

#4 Classes that represent the 4 states for the bird fly, flap, hit, ground (finite state machine) 

#Class flying state -----------------------------------------------------------------------------------------

#create flying state class 
class FlyingState:
	#get bird reference to use functions from bird node (StaticBody2D)
	var bird
	#get previous gravity scale so bird can fall
	var prev_gravity_scale
	
	#describe what the bird should do when in flying state
	
	#called when object of this class has been created (constructor of class)
	#perform actions with nodes
	func _init(bird):
		#declare bird reference
		self.bird = bird 
		#play fly animation
		bird.get_node(\"AnimationPlayer\").play(\"Fly\")
		#bird is moving rightwards constantly at 150 pixels when flying
		#bird.linear_velocity = Vector2(bird.speed, bird.linear_velocity.y)
		#save gravity value 
		#prev_gravity_scale = bird.gravity_scale
		#set gravity to 0 so bird is flying
		bird.gravity_scale = 0
	
	#update frame by frame actions using delta time
	func update(delta):
		pass
	
	#handle user input
	func input(event):
		pass
	
	#know when its end of state and perform actions before going to another state
	func exit():
		#when state is exited gravity scale reverts back to original gravity scale
		bird.gravity_scale = prev_gravity_scale
		#stop flying animation when state is exited
		bird.get_node(\"AnimationPlayer\").stop()

#Class flapping state ---------------------------------------------------------------------------------------

#create flapping state
class FlappingState:
	#get bird reference to use functions from bird node (StaticBody2D)
	var bird
	#describe what the bird should do when in flapping state
	
	#called when object of this class has been created
	func _init(bird):
		#declare bird reference
		self.bird = bird
		#bird is moving rightwards constantly at 150 pixels
		bird.linear_velocity = Vector2(bird.speed, bird.linear_velocity.y)
		#when screen starts bird flaps
		flap()
	
	#update frame by frame actions using delta time
	func update(delta):
		#if bird rotation is less than -30 degrees (30 degress anticlockwise) rate of velocity of the bird rotaing is 0
		if rad2deg(bird.rotation) <  -30:
			#bird points upwards when flapping
			bird.angular_velocity = 0
	
		#if bird is falling and not flapping then bird is pointing downwards
		if bird.linear_velocity.y > 0:
			#bird rotates 1.5 pixels per frame clockwise
			bird.angular_velocity = 1.5
	
	#handle user input
	func input(event):
		#if user touch screen bird flaps
		if event is InputEventScreenTouch:
			#if user event press screen screen bird flap
			if event.pressed:
			#bird flaps when user press space
				flap()
	
	#calls _on_body_entered signal and sets state for signal from this function
	func on_Bird_Body_entered(body):
		#if bird collided with body in group pipes bird state is STATE_HIT 
		if body.is_in_group(\"Pipes\"):
			bird.set_state(bird.STATE_HIT)
		#if bird collided with body in group ground bird state is STATE_GROUNDED
		elif body.is_in_group(\"Ground\"):
			bird.set_state(bird.STATE_GROUNDED)
	
	func flap():
		#y velocity of bird changes while x velocity remains constant
		bird.linear_velocity = Vector2(bird.linear_velocity.x, -250)
		#bird points upwards when flapping (rotational velocity spins anti clockwise)
		bird.angular_velocity = -3
		#animation plays every time bird flaps
		bird.get_node(\"AnimationPlayer\").play(\"Flap\")
		print(bird.speed)

	#know when its end of state and perform actions before going to another state
	func exit():
		bird.get_node(\"AnimationPlayer\").stop()

#Class hit state ---------------------------------------------------------------------------------------

#create hit state
class HitState:
	#get bird reference to use functions from bird node (StaticBody2D)
	var bird
	#describe what the bird should do when in hit state
	
	#called when object of this class has been created
	func _init(bird):
		#declare bird reference
		self.bird = bird
		#when bird is hit velocity is 0
		bird.linear_velocity = Vector2(0,0)
		#bird face downwards when falling
		bird.angular_velocity = 2
		
		#--make sure bird can not collide with pipe once it hits pipe so bird falls straight to ground--
		#returns array of colliding bodies of which the bird collides with
		#get the first collision from colliding bodies (the pipe)
		var body = bird.get_colliding_bodies()[0]
		#Adds a body to the list of bodies that bird can't collide with as bird can collide with pipe only once
		bird.add_collision_exception_with(body)
	
	#update frame by frame actions using delta time
	func update(delta):
		pass
	
	#handle user input
	func input(event):
		pass
	
	#if bird body collide with ground change state to STATE_GROUNDED
	func on_Bird_Body_entered(body):
		if body.is_in_group(\"Ground\"):
			bird.set_state(bird.STATE_GROUNDED)
	
	#know when its end of state and perform actions before going to another state
	func exit():
		pass

#Class ground state ---------------------------------------------------------------------------------------

#create ground state
class GroundState:
	#get bird reference to use functions from bird node (StaticBody2D)
	var bird
	#describe what the bird should do when in ground state
	
	#called when object of this class has been created
	func _init(bird):
		#declare bird reference
		self.bird = bird
		#bird don't move when it hits ground linear velocity is 0 and angular velocity is 0
		bird.linear_velocity = Vector2(0,0)
		bird.angular_velocity = 0
	
	#update frame by frame actions using delta time
	func update(delta):
		pass
	
	#handle user input
	func input(event):
		pass
	
	#know when its end of state and perform actions before going to another state
	func exit():
		pass
"

[sub_resource type="GDScript" id=3]
resource_name = "MenuCamera"
script/source = "extends StaticBody2D

#get position2D node
onready var bottom_right = get_node(\"BottomRight\")
#get camera node
onready var camera = get_tree().get_root().get_node(\"Menu/Camera\")
#creates signal to destroy ground that is out of camera view
#exit tree built in signal can be used as well 
signal destroyed

func _ready():
	#add ground to group
	add_to_group(\"Ground\")

#called every frame
func _process(delta):
	#code won't run if camera is non existent
	if camera == null:
		return
	#(get_global_position used to get exact position of position2D at end of ground)
	#if camera position >= Position2d, delete ground
	#need to adjust camera offset with ground spawning so get_total_position() is used
	if bottom_right.get_global_position().x <= camera.get_total_position().x:
		queue_free()
	#	#when position2D <= camera position.x signal destroyed is emitted which calls following functions from spawnerGround script spawn_ground(), next_position() 
		emit_signal(\"destroyed\")"

[sub_resource type="GDScript" id=4]
script/source = "#Menu Play_Button (built-in)
extends TextureButton

func _ready():
	pass

func _on_PlayButton_pressed():
	#change scene from menu to game
	StageManager.change_stage(StageManager.GAMESTAGE)"

[node name="Menu" type="Node"]

[node name="Background" parent="." instance=ExtResource( 1 )]

[node name="Camera" type="Camera2D" parent="."]
offset = Vector2( -256, 0 )
anchor_mode = 0
current = true
script = SubResource( 1 )

[node name="Bird" parent="." instance=ExtResource( 2 )]
position = Vector2( 256, 300 )
script = SubResource( 2 )

[node name="Ground" parent="." instance=ExtResource( 3 )]
scale = Vector2( 1.1, 1.1 )
script = SubResource( 3 )

[node name="HUD" type="CanvasLayer" parent="."]
layer = 5

[node name="FlappyBirdImg" type="TextureRect" parent="HUD"]
margin_left = 128.0
margin_top = 150.0
margin_right = 217.0
margin_bottom = 174.0
rect_scale = Vector2( 3, 3 )
texture = ExtResource( 4 )

[node name="RateButton" type="TextureButton" parent="HUD"]
margin_left = 210.735
margin_top = 397.06
margin_right = 241.735
margin_bottom = 415.06
rect_scale = Vector2( 3, 3 )
texture_normal = ExtResource( 5 )
texture_pressed = ExtResource( 6 )

[node name="PlayButton" type="TextureButton" parent="HUD"]
margin_left = 90.0
margin_top = 500.0
margin_right = 142.0
margin_bottom = 540.0
rect_scale = Vector2( 3, 3 )
texture_normal = ExtResource( 7 )
texture_pressed = ExtResource( 8 )
script = SubResource( 4 )

[node name="ScoreButton" type="TextureButton" parent="HUD"]
margin_left = 270.0
margin_top = 500.0
margin_right = 322.0
margin_bottom = 540.0
rect_scale = Vector2( 3, 3 )
texture_normal = ExtResource( 9 )
texture_pressed = ExtResource( 10 )
[connection signal="pressed" from="HUD/PlayButton" to="HUD/PlayButton" method="_on_PlayButton_pressed"]
